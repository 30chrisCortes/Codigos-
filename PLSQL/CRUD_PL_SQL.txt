--CRUD PL/SQL
/*1*/

--EJECUCIONES-------------------------------------------------------------------
SELECT REGION_ID, REGION_NAME FROM REGIONS;
--INSERTAR
EXEC PKG_CRUD_REGIONES.ALTA_REGION(5, '#REGION_PRUEBA');
--ELIMINAR
EXEC PKG_CRUD_REGIONES.BAJA_REGION(5);
--MODIFICAR
EXEC PKG_CRUD_REGIONES.MOD_REGION(5, 'jOSEtOLEdoM');
--LEER
SELECT PKG_CRUD_REGIONES.CON_REGION(REGION_ID), REGION_ID FROM REGIONS;

--PASO 1: CREAR LA CABECERA DEL PACKAGE

CREATE OR REPLACE PACKAGE PKG_CRUD_REGIONES 
IS
PROCEDURE ALTA_REGION (CODIGO NUMBER, NOMBRE VARCHAR2);--INSERTAR
PROCEDURE BAJA_REGION (CODIGO NUMBER);--ELIMINAR
PROCEDURE MOD_REGION (CODIGO NUMBER, REGION_A_MODIFICAR VARCHAR2);--MODIFICAR
FUNCTION CON_REGION (CODIGO NUMBER) RETURN VARCHAR2;--LEER

END PKG_CRUD_REGIONES;

--PASO 2: CREAR EL CUERPO DEL PACKAGE (PACKAGE BODY)

CREATE OR REPLACE PACKAGE BODY PKG_CRUD_REGIONES 
IS
--CREAR UNA FUNCION PRIVADA SOLO ES VISIBLE DENTRO DE ESTE PACKAGE BODY---------
FUNCTION EXISTE_REGION (CODIGO NUMBER, NOMBRE VARCHAR2) 
RETURN BOOLEAN
IS
    CURSOR C1 IS 
    SELECT REGION_ID, REGION_NAME 
    FROM REGIONS;
BEGIN
    FOR i IN C1 LOOP
        IF i.REGION_ID = CODIGO AND i.REGION_NAME = NOMBRE THEN
            RETURN TRUE;    
        END IF;
    END LOOP;
        RETURN FALSE;
END EXISTE_REGION;              

--CREAR UN PROCEDIMIENTO QUE INGRESE UNA NUEVA REGION---------------------------
PROCEDURE ALTA_REGION (CODIGO NUMBER, NOMBRE VARCHAR2)
IS
DEVUELTO BOOLEAN;

BEGIN
DEVUELTO:= EXISTE_REGION(CODIGO, NOMBRE);

IF DEVUELTO = FALSE THEN
    INSERT INTO REGIONS VALUES(CODIGO, NOMBRE);
    DBMS_OUTPUT.PUT_LINE('INSERCION CORRECTA'); 
ELSE
    DBMS_OUTPUT.PUT_LINE('LA REGION EXISTE');
END IF;

EXCEPTION 
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE('LA ID YA EXISTE(DUPLICADA)');
    
END ALTA_REGION;

--PROCEDIMIENTO PARA ELIMINAR UNA REGION DE LA TABLA REGIONS--------------------
PROCEDURE BAJA_REGION (CODIGO NUMBER)
IS
DEVUELTO BOOLEAN;
NOMBRE_REGION VARCHAR2(100);

BEGIN

SELECT REGION_NAME INTO NOMBRE_REGION 
FROM REGIONS 
WHERE REGION_ID = CODIGO;

DEVUELTO:= EXISTE_REGION(CODIGO, NOMBRE_REGION);

IF DEVUELTO = TRUE THEN 
    DELETE FROM REGIONS WHERE REGION_ID = CODIGO; 
    DBMS_OUTPUT.PUT_LINE('LA REGION CON ID '||CODIGO||' FUE ELIMINADA');
END IF;

EXCEPTION
WHEN NO_DATA_FOUND THEN 
    DBMS_OUTPUT.PUT_LINE('LA REGION NO EXISTE');
END BAJA_REGION;

--CREAR UNA FUNCION PRIVADA SOLO ES VISIBLE DENTRO DE ESTE PACKAGE BODY---------
--SOLO VERIFICARA LA COLUMNA REGION ID------------------------------------------
FUNCTION EXISTE_ID_REGION (CODIGO NUMBER) 
RETURN BOOLEAN
IS
    CURSOR C1 IS 
    SELECT REGION_ID FROM REGIONS;
BEGIN
    FOR i IN C1 LOOP
        IF i.REGION_ID = CODIGO THEN
            RETURN TRUE;    
        END IF;
    END LOOP;
        RETURN FALSE;
END EXISTE_ID_REGION;

--PROCEDIMINETO PARA MODIFICAR UNA REGION---------------------------------------
PROCEDURE MOD_REGION (CODIGO NUMBER, REGION_A_MODIFICAR VARCHAR2)
IS
DEVUELTO BOOLEAN;

BEGIN
DEVUELTO:= EXISTE_ID_REGION(CODIGO);

IF DEVUELTO = TRUE THEN 
    UPDATE REGIONS SET REGION_NAME = REGION_A_MODIFICAR 
    WHERE REGION_ID = CODIGO;
    DBMS_OUTPUT.PUT_LINE('LA REGION A SIDO ACTUALIZADA');
ELSE
    DBMS_OUTPUT.PUT_LINE('LA ID DE LA REGION NO EXISTE');
END IF;
END MOD_REGION;

--FUNCION QUE RETORNA EL NOMBRE SEGUN LA ID DE LA REGION------------------------
FUNCTION CON_REGION (CODIGO NUMBER) 
RETURN VARCHAR2
IS
REGION_A_DEVOLVER VARCHAR2(100);

BEGIN

SELECT REGION_NAME INTO REGION_A_DEVOLVER
FROM REGIONS 
WHERE REGION_ID = CODIGO;

RETURN REGION_A_DEVOLVER;
END CON_REGION;

END PKG_CRUD_REGIONES;